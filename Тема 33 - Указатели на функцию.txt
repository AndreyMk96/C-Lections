// Тема 33 - указатель на функцию в качестве параметра

#include <iostream>

using namespace std;

void f1(){
    cout << "Function1" << endl;
}

void f2(){
    cout << "Function2" << endl;
}

int f3(int a, int b){
    return a + b;
}

int f4(int a, int b){
    return a - b;
}

string GetUserName(){
    return "UserName";
}

string GetUserPassword(){
    return "UserPassword";
}

void ShowUserInfo(string (*f)()){ // Функция в кач-ве параметра принимает указатель на функцию
    cout << f() << endl;
}

int main() {
    // Указатель на функцию - это переменная, которой можно присвоить ссылку на функцию
    // Используя указатель на функцию можно добиться эффекта, похожего на полиморфизм в ООП

    // Создадим указатель на ф-цию типа void
    void (*pointer1)(); // Создали указатель, в который можно присвоить адрес функции типа void
    pointer1 = f1;
    pointer1(); // Указатель вызовет функцию, на которую ссылается
    pointer1 = f2; // Теперь указатель ссылается на другую функцию
    pointer1();

    // Создадим указатель на ф - цию типа int,  c аргументами
    int (*pointer2)(int a, int b);
    pointer2 = f3;
    cout << pointer2(5, 10) << endl;
    pointer2 = f4;
    cout << pointer2(5, 10) << endl;

    // Но в таком виде указатели на ф - цию не используют.
    // Можно просто вызвать ф - цию, которая нужна

    // Пример грамотного использования указателя на функцию
    ShowUserInfo(GetUserName);
    ShowUserInfo(GetUserPassword);
    return 0;
}
