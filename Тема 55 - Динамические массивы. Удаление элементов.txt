// Тема - 55 - Динамические массивы. Удаление элементов.
#include <iostream>

using namespace std;

// Функция для вывода массива на консоль
void print_array(string text, int *a, int size){
    cout << text <<"\t";
    for(int i = 0; i < size; i++){
        cout << a[i] << " ";
    }
    cout << endl;
}

// Функция удаления элемента из массива
void delete_item(int *&a, int size, int pos){
    int *new_arr = new int [size - 1];
    for (int i = 0; i < pos; i++){
        new_arr[i] = a[i];
    }
    for(int i = pos; i < size-1; i++){
        new_arr[i] = a[i + 1];
    }
    delete[] a;
    a = new_arr;
}

int main()
{
    // Основная сложность при изменении количества элементов в массиве -
    // память под массив выделяется непрерывно

    // Чтобы удалить элемент из массива, необходимо создать новый массив, размером меньше, и вручную переписать данные

    int size = 5;
    int *arr = new int[size]{1,3,5,7,9};

    // Удаление последнего элемента
    int *new_arr = new int[size - 1];
    for (int i = 0; i < size - 1; i++){
        new_arr[i] = arr[i];
    }
    size--;
    delete[] arr;
    arr = new_arr;  // Так как область памяти указателя arr очищена, то можно сделать, чтобы он ссылался на новый массив
    print_array("arr1", arr, size);

    // В случае если добавить надо удалить несколько элементов, удаление лучше реализовать через функцию
    // Пример. Дан массив из 10 элементов. Необходимо удалить все четные элементы из массива
    // В функции массив принимается по сылке на указатель
    int size2 = 13;
    int *new_arr2 = new int[size2]{1,2,3,4,5,6,7,8,9,10};
    for (int i = 0; i < size2; i++){
        if (new_arr2[i] % 2 == 0){
            delete_item(new_arr2, size2, i);
            size2--;
            i--;  // Инкремент уменьшается, на случай если несколько четных подряд
        }
    }
    print_array("arr2", new_arr2, size2);
}
