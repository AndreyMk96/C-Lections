/*

Полиморфизм
Виртуальные функции
Virtual
Override

*/

#include "stdafx.h"
#include <iostream>
#include <conio.h>

using namespace std;

class Gun {
public:
	//чтобы переопределить этот метод в классе - наследнике, его надо сделать виртуальным
	virtual void shoot() {
		cout << "Bang!!!\n";
	}
};

//создаем класс - наследник от Gun
class SubmachineGun:public Gun{
	//метод shoot переопределяет метод shoot из класса Gun, ключевое слово override, для контроля компилятором(для предотващетня ошибок)
	//без override это будет по сути другой метод
	void shoot() override{
		cout << "Bang, Bang, Bang\n";
	}
};

class Bazooka :public Gun {
	void shoot() override {
		cout << "Baaaaaaaaaaaaaaaang\n";
	}
};

class Player {
public:
	void shoot(Gun * gun){
		gun->shoot();
	}
};
int main()
{
	//Виртуальные функции, это один из способов реализации полиморфизма
	//Полиморфизм - это когда объект опрелделяет свое поведение в зависимости от реализации

	//создаем два класса
	Gun gun;
	SubmachineGun mashinegun;

	//указатель на тип пистолет может хранить ссылку на обьект класса пистолет - пулемет
	Gun * weapon = &mashinegun;
	//вызовем метод shoot у указателя
	weapon->shoot();
	Gun * weapon2 = &gun;
	weapon2->shoot();
	//Создаем класс игрока, и даем ему какое нибудь оружие
	Player player;
	//указатель на базовый класс может принимать ссылки на любого его наследника
	player.shoot(&mashinegun);
	Bazooka bazooka;
	player.shoot(&bazooka);
	_getch();
    return 0;
}
