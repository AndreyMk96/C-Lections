

// Тема 61 - Итераторы

#include <iostream>
#include <vector>

using namespace std;


    // Итераторы обеспечивают доступ к элементам контейнера и представляют реализацию распространенного паттерна объектно-ориентированного программирования 
    // "Iterator". С помощью итераторов очень удобно перебирать элементы. В C++ итераторы реализуют общий интерфейс для различных типов контейнеров, 
    // что позволяет использовать единой подход для обращения к элементам разных типов контейнеров.
    
    
    // Итератор описывается типом iterator. Для каждого контейнера конкретный тип итератора будет отличаться. 
    // Так, итератор для контейнера list<int> представляет тип list<int>::iterator, а итератор контейнера vector<int> 
    // представляет тип vector<int>::iterator и так далее. Однако общий функционал, который применяется для доступа к элементам, будет аналогичен.
    
int main()
{
    vector<int> numbers{ 1,2,3,4 };
    vector<int>::iterator iter = numbers.begin();  // получаем итератор
    
    /* Операции с итераторами 
    
    *iter: получение элемента, на который указывает итератор
    ++iter: перемещение итератора вперед для обращения к следующему элементу
    --iter: перемещение итератора назад для обращения к предыдущему элементу. Итераторы контейнера forward_list не поддерживают операцию декремента.
    iter1 == iter2: два итератора равны, если они указывают на один и тот же элемент
    iter1 != iter2: два итератора не равны, если они указывают на разные элементы
    iter + n: возвращает итератор, который смещен от итератора iter на n позиций вперед
    iter - n: возвращает итератор, который смещен от итератора iter на n позиций назад
    iter += n: перемещает итератор на n позиций вперед
    iter -= n: перемещает итератор на n позиций назад
    iter1 - iter2: возвращает количество позиций между итераторами iter1 и iter2
    >, >=, <, <=: операции сравнения. Один итератор больше другого, если указывает на элемент, который ближе к концу*/
    
    // Перебор через итератор
    for (auto iter = numbers.begin(); iter < numbers.end(); iter++){
        cout << *iter << " ";
    }
    
    // Это работает с любыми типами контейнеров
    int numbers2[] = {5, 6, 7, 8};
    for (auto iter2 = begin(numbers2); iter2 < end(numbers2); iter2++){
        cout << *iter2 << " ";
    }
    
    return 0;
}
