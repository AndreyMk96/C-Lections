// Тема 40 - Функции и методы строк

#include <iostream>

using namespace std;

int main()
{
    string str = "Hi, Friend";
    // Размер строки
    cout << str.size() << endl;
    cout << str.length() << endl;
    // Задачи:
    // 1) Пользователь вводит с клавиатуры две строки. Написать функцию, которая определяет, в какой строке больше символов и насколько

    // Объединение строк
    // Примечание, нельзя объеденить строку со строкой, можно строку с переменной
    cout << str + " Andrey" << endl;
    cout << str + " " "Andrey" "!" << endl;  // если надо объеденить строку со строкой
    // Задачи:
    // 1) Пользователь вводит три строки с клавиатуры. Написать функцию, которая объединяет их, и заменяет буквы а о е на символ *

    // Сравнение строк
    // К строкам в языке С++ можно применять операции сравнения. > >= < <= == != <=>
    cout << ("apple" < "apartments") << endl; // Истина, тк второе слово раньше по алфавиту
    cout << ("APPLE" < "apartments") << endl; // Ложь, тк в юникоде заглавные буквы раньше прописных

    // Задачи:
    // 1) Дан список из 10 имен. Найти в нем, самое первое в алфавитном порядке, и самое последнее
    // 2) Дан список из 10 имен. Отсортировать его в алфавинтном порядке

    // Для сравнения строк у строки также можно вызвать функцию compare().
    // В нее передается другая строка, с которой сравнивается текущая. Функция compare возвращает 0,
    // если две строки равны. Если текущая строка больше, то возвращается число больше 0.
    // Если текущая строка меньше, то возвращается число менише 0.
    cout << str.compare("Hi, Friend") << endl; // 0, тк строки равны

    // Функция compare, также может принимать три параметра, начало, и конец промежутка на котором сравнимается строка, а также строка с которой сравнивается
    cout << str.compare(4, 10, "Friend") << endl; // 0, тк промежуток равен заданной строке
    //  Например, нам надо узнать индекс, с которого встречается одна строка в другой
    std::string text {"Hello world!"};
    std::string word {"world"};
    for (int i = 0; i < text.length() - word.length() + 1; i++)
    {
        if (text.compare(i, word.length(), word) == 0)
        {
            std::cout << "text contains " << word << " at index " << i << std::endl;
        }
    }
}