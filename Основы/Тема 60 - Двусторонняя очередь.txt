// Тема 60 - Двусторонняя очередь

#include <iostream>
#include <deque>

using namespace std;

int main()
{
    // Deque представляет двухстороннюю очередь. Для использования данного 
    // контейнера нужно подключить заголовочный файл deque.
    
    // Способы создания двусторонней очереди
    deque<int> deque1;                   // пустая очередь
    deque<int> deque2(5);                // deque2 состоит из 5 чисел, каждый элемент имеет значение по умолчанию
    deque<int> deque3(5, 2);              // deque3 состоит из 5 чисел, каждое число равно 2
    deque<int> deque4 = { 1, 2, 3, 5 };  // deque5 состоит из чисел 1, 2, 3, 5
    deque<int> deque5({ 1, 2, 3, 4, 5 }); // deque6  состоит из чисел 1, 2, 3, 4, 5
    deque<int> deque6(deque5);           // deque7 - копия очереди deque5
    deque<int> deque7 = deque6;          // deque8 - копия очереди deque6
    
    // Получение элементов очереди
    int first = deque5.front();    // Получение первого элемента
    int last = deque5.back();      // Получение последнего элемента
    int second = deque5[1];        // Взятие элемента по индексу
    int third = deque5.at(2);      // Взятие элемента по индексу
    std::cout << first << second << third << last << endl; // 1235
    
    // deque, как и vector и array, поддерживает произвольный доступ к элементам контейнера, 
    // но в отличие от вектора также поддерживает добавление в начало контейнера. 
    // Кроме того, во внутренней реализации deque при изменении размера не выделяет новый массив в 
    // памяти для вмещения нового набора элементов, а манипулирует указателями.
    
    // Перебор двусторонней очереди
     for (int n :deque5)
        std::cout << n << " ";
    std::cout << std::endl;
 
    for (unsigned i {}; i < deque5.size(); i++)
        std::cout << deque5[i] << " ";
    std::cout << std::endl;
    
    // Изменение очереди
    deque5.push_back(6);   // Добавление в конец очереди
    deque5.push_front(0);  // Добавление в начало очереди
    auto iter = deque5.cbegin() + 3;
    deque5.emplace(iter, 100); // Добавление в произвольную позицию
    iter++;
    deque5.insert(iter, 200); // Добавление в произвольную позицию (аналогично emplace)
    iter++;
    deque5.insert(iter, 2, 300); // Добавление в произвольную позицию n элементов
    
    // Методы emplace, insert работаю только с итераторами
    
    for (int n :deque5)
        std::cout << n << " ";
    std::cout << std::endl;
    
    return 0;
}
