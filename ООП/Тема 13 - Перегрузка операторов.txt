// Тема 11 - Перегрузка операторов

// Перегрузка операторов (operator overloading) позволяет определить для объектов классов втроенные операторы, такие как +, -, * и т.д. 
// Для определения оператора для объектов своего класса, необходимо определить функцию, название которой содержит слово operator и символ перегружаемого оператора. 
// Функция оператора может быть определена как член класса, либо вне класса.

// Перегрузить можно только те операторы, которые уже определены в C++. Создать новые операторы нельзя. 
// Также нельзя изменить количество операндов, их ассоциативность, приоритет.

// Если функция оператора определена как отдельная функция и не является членом класса, 
// то количество параметров такой функции совпадает с количеством операндов оператора. 
// Например, у функции, которая представляет унарный оператор, будет один параметр, а у функции, которая представляет бинарный оператор, - два параметра. 
// Если оператор принимает два операнда, то первый операнд передается первому параметру функции, а второй операнд - второму параметру. 
// При этом как минимум один из параметров должен представлять тип класса.

#include <iostream>
  
class Counter
{
public:
    Counter(int val)
    {
        value = val;
    }
    void print() 
    {
        std::cout << "Value: " << value << std::endl;
    }
    // Здесь в классе Counter определен оператор сложения, цель которого сложить два объекта Counter:
    // Тип возвращаемого значения тоже Counter
    Counter operator + (const Counter& counter) const // Принимаем константную ссылку на объект класса
    {
        return Counter{this->value + counter.value};
    }
    // Стоит отметить, что необязательно возвращать объект класса. 
    // Это может быть и любой объект в зависимости от ситуации. И также мы можем определять дополнительные перегруженные функции операторов:
    int operator + (int number) const
    {
        return this->value + number;
    }
private:
    int value;
};
 
int main()
{
    Counter c1{20};
    Counter c2{10};
    Counter c3 = c1 + c2; // Если нет перегрузки, то будет ошибка
    c3.print();   // Value: 30
    Counter c4 = c3.operator+(10); // Полная запись оператора выглядит так
    c4.print();   // Value: 40
}
