// Тема 30 - SOLID - принципы ч. 3

/* В данном примере классы Circle и Square расширяют абстрактный класс Shape, который имеет чисто виртуальную функцию area(). 
Функция totalArea() работает с вектором указателей на объекты типа Shape, что позволяет добавлять новые типы фигур без 
изменения кода функции totalArea(). Таким образом, принцип открытости/закрытости соблюдается: мы можем добавлять новые фигуры, 
не изменяя существующий код. */

#include <iostream>
#include <vector>

using namespace std;

// Абстрактный класс Shape
class Shape {
public:
    virtual double area() const = 0;
};

// Класс Circle, который расширяет абстрактный класс Shape
class Circle : public Shape {
private:
    double radius;

public:
    Circle(double r) : radius(r) {}

    double area() const override {
        return 3.14 * radius * radius;
    }
};

// Класс Square, который также расширяет абстрактный класс Shape
class Square : public Shape {
private:
    double side;

public:
    Square(double s) : side(s) {}

    double area() const override {
        return side * side;
    }
};

// Функция для вычисления общей площади фигур
double totalArea(const std::vector<Shape*>& shapes) {
    double total = 0.0;
    for (auto& shape : shapes) {
        total += shape->area();
    }
    return total;
}

int main() {
    Circle circle(5.0);
    Square square(4.0);

    vector<Shape*> shapes = {&circle, &square};

    cout << "Total area: " << totalArea(shapes) << std::endl;

    return 0;
}
