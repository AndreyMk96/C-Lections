// Тема 14 - Множественное наследование. Конструкторы и деструкторы

// Создадим пример темы "Животные", где у нас будет класс Animal с базовыми характеристиками животного, 
// классы Bird и Fish будут наследоваться от класса Animal, а также класс FlyingFish, который будет наследоваться как от Bird, 
// так и от Fish. В каждом из этих классов будут приватные переменные и конструкторы для их инициализации.

// В этом примере мы создаем классы Animal, Bird, Fish и FlyingFish, где каждый класс имеет свои уникальные приватные 
// переменные и конструкторы для их инициализации. Класс FlyingFish демонстрирует множественное наследование от классов 
// Bird и Fish.

#include <iostream>
#include <string>

class Animal {
private:
    std::string species;
    int age;

public:
    Animal(const std::string& species, int age) : species(species), age(age) {}

    void displayInfo() {
        std::cout << "Species: " << species << ", Age: " << age << std::endl;
    }
};

class Bird : public Animal {
private:
    std::string featherColor;

public:
    Bird(const std::string& species, int age, const std::string& featherColor)
        : Animal(species, age), featherColor(featherColor) {}

    void displayInfo() {
        Animal::displayInfo();
        std::cout << "Feather Color: " << featherColor << std::endl;
    }
};

class Fish : public Animal {
private:
    std::string scaleColor;

public:
    Fish(const std::string& species, int age, const std::string& scaleColor)
        : Animal(species, age), scaleColor(scaleColor) {}

    void displayInfo() {
        Animal::displayInfo();
        std::cout << "Scale Color: " << scaleColor << std::endl;
    }
};

class FlyingFish : public Bird, public Fish {
private:
    std::string ability;

public:
    FlyingFish(const std::string& species, int age, const std::string& featherColor,
               const std::string& scaleColor, const std::string& ability)
        : Bird(species, age, featherColor), Fish(species, age, scaleColor), ability(ability) {}

    void displayInfo() {
        Bird::displayInfo();
        Fish::displayInfo();
        std::cout << "Ability: " << ability << std::endl;
    }
};

int main() {
    Bird sparrow("Sparrow", 2, "Brown");
    Fish salmon("Salmon", 3, "Silver");
    FlyingFish flyingFish("Flying Fish", 1, "Blue", "Silver", "Can fly and swim");

    sparrow.displayInfo();
    std::cout << std::endl;
    
    salmon.displayInfo();
    std::cout << std::endl;

    flyingFish.displayInfo();

    return 0;
}