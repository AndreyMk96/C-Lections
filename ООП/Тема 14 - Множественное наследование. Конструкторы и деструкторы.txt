// Тема 14 - Множественное наследование. Конструкторы и деструкторы

#include <iostream>

using namespace std;
 
class Book    // класс книги
{
public:
    Book(int pages)
    {
        cout << "Book created" << endl;
    }
    ~Book()
    {
        cout << "Book deleted" << endl;
    }
    void printPageCount()
    {
        cout << pages << " pages" << endl;
    }
private:
    int pages; // количество страниц
};
 
class File    // класс электронного файла
{
public:
    File(float size)
    {
        cout << "File created" << endl;
    }
    ~File()
    {
        cout << "File deleted" << endl;
    }
    void printSize()
    {
        std::cout << size << "Mb" << std::endl;
    }
private:
    float size;  // размер файла
};

// класс электронной книги
class Ebook : public Book, public File   
{
public:
    Ebook(string title, int pages, float size): Book(pages), File(size), title(title)
    {
        cout << "Ebook created" << endl;
    }
    ~Ebook()
    {
        cout << "Ebook deleted" << endl;
    }
    void printTitle()
    {
        std::cout << "Title: " << title << std::endl;
    }
private:
    string title;  // название книги
};

// Если базовые классы Book и File имеют функцию с одним и тем же именем получается двойственность, и такой код просто не скомпилируется.
 
int main()
{
    Ebook cppbook {"About C++", 320, 5.6};
    cppbook.printTitle();
    cppbook.printPageCount();
    cppbook.printSize();
}