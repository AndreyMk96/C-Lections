// Тема 25 - Операторы преобразования типов

// C++ позвляет определить функцию оператора преобразования из типа текущего класса в другой тип. 
// Тип, в который производится преобразование, может быть фундаментальным типом или типом класса. 

// В отличие от большинства операторов, операторы преобразования должны быть определены только как функции-члены класса. 
// Их нельзя определить как обычные функции. Они также являются единственными операторами, 
// в которых ключевому слову оператора не предшествует тип возвращаемого значения (вместо этого возвращаемый тип идет после ключевого слова operator).

#include <iostream>

using namespace std;
  
class Counter
{
public:
    Counter(int number)
    {
        value = number;
    }
    // Здесь в классе Counter определен оператор преобразования в тип int:
    operator int() const { return value; }
    // Оператор преобразования в bool
    operator bool() const  { return value != 0; } 
    // Неявные преобразования не всегда могут быть желательны. 
    // В этом случае их можно отключить, определив функцию оператора с помощью ключевого слова explicit:
    //explicit operator int() const { return value; } // Только явные преобразования
private:
    int value;
};
 
int main()
{
    Counter counter{25};
    int n = counter;    // преобразуем от Counter в int
    cout << n << endl;             // 25
    // или так
    int m {counter};
    cout << m << endl;             // 25
    // Благодаря оператору преобразования подобная конвертация типов выполняется неявно. 
    // Но преобразование типов также можно выполнять явно, например, с помощью функции static_cast
    int n2 = static_cast<int>(counter);  // явное преобразование из Counter в int
    cout << n2 << endl;        // 25
    // или так
    int m2 {static_cast<int>(counter)};  // явное преобразование из Counter в int
    cout << m2 << endl;        // 25
    bool b = counter;    // преобразуем от Counter в bool
    cout << b << endl;             // 25
    
}